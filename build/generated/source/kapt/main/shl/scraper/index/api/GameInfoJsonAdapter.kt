// Code generated by moshi-kotlin-codegen. Do not edit.
package shl.scraper.index.api

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString
import shl.scraper.index.SeasonType

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class GameInfoJsonAdapter(
  moshi: Moshi
) : JsonAdapter<GameInfo>() {
  private val options: JsonReader.Options = JsonReader.Options.of("season", "league", "date",
      "homeTeam", "homeScore", "awayTeam", "awayScore", "type", "played", "overtime", "shootout",
      "slug", "awayTeamInfo", "homeTeamInfo", "seasonType")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "season")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "date")

  private val nullableTeamInfoResponseAdapter: JsonAdapter<TeamInfoResponse?> =
      moshi.adapter(TeamInfoResponse::class.java, emptySet(), "awayTeamInfo")

  private val nullableSeasonTypeAdapter: JsonAdapter<SeasonType?> =
      moshi.adapter(SeasonType::class.java, emptySet(), "seasonType")

  override fun toString(): String = buildString(30) {
      append("GeneratedJsonAdapter(").append("GameInfo").append(')') }

  override fun fromJson(reader: JsonReader): GameInfo {
    var season: Int? = null
    var league: Int? = null
    var date: String? = null
    var homeTeam: Int? = null
    var homeScore: Int? = null
    var awayTeam: Int? = null
    var awayScore: Int? = null
    var type: String? = null
    var played: Int? = null
    var overtime: Int? = null
    var shootout: Int? = null
    var slug: String? = null
    var awayTeamInfo: TeamInfoResponse? = null
    var awayTeamInfoSet: Boolean = false
    var homeTeamInfo: TeamInfoResponse? = null
    var homeTeamInfoSet: Boolean = false
    var seasonType: SeasonType? = null
    var seasonTypeSet: Boolean = false
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> season = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("season", "season",
            reader)
        1 -> league = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("league", "league",
            reader)
        2 -> date = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("date", "date",
            reader)
        3 -> homeTeam = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("homeTeam",
            "homeTeam", reader)
        4 -> homeScore = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("homeScore",
            "homeScore", reader)
        5 -> awayTeam = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("awayTeam",
            "awayTeam", reader)
        6 -> awayScore = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("awayScore",
            "awayScore", reader)
        7 -> type = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type", "type",
            reader)
        8 -> played = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("played", "played",
            reader)
        9 -> overtime = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("overtime",
            "overtime", reader)
        10 -> shootout = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shootout",
            "shootout", reader)
        11 -> slug = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("slug", "slug",
            reader)
        12 -> {
          awayTeamInfo = nullableTeamInfoResponseAdapter.fromJson(reader)
          awayTeamInfoSet = true
        }
        13 -> {
          homeTeamInfo = nullableTeamInfoResponseAdapter.fromJson(reader)
          homeTeamInfoSet = true
        }
        14 -> {
          seasonType = nullableSeasonTypeAdapter.fromJson(reader)
          seasonTypeSet = true
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    val result = GameInfo(
        season = season ?: throw Util.missingProperty("season", "season", reader),
        league = league ?: throw Util.missingProperty("league", "league", reader),
        date = date ?: throw Util.missingProperty("date", "date", reader),
        homeTeam = homeTeam ?: throw Util.missingProperty("homeTeam", "homeTeam", reader),
        homeScore = homeScore ?: throw Util.missingProperty("homeScore", "homeScore", reader),
        awayTeam = awayTeam ?: throw Util.missingProperty("awayTeam", "awayTeam", reader),
        awayScore = awayScore ?: throw Util.missingProperty("awayScore", "awayScore", reader),
        type = type ?: throw Util.missingProperty("type", "type", reader),
        played = played ?: throw Util.missingProperty("played", "played", reader),
        overtime = overtime ?: throw Util.missingProperty("overtime", "overtime", reader),
        shootout = shootout ?: throw Util.missingProperty("shootout", "shootout", reader),
        slug = slug ?: throw Util.missingProperty("slug", "slug", reader)
    )
    result.awayTeamInfo = if (awayTeamInfoSet) awayTeamInfo else result.awayTeamInfo
    result.homeTeamInfo = if (homeTeamInfoSet) homeTeamInfo else result.homeTeamInfo
    result.seasonType = if (seasonTypeSet) seasonType else result.seasonType
    return result
  }

  override fun toJson(writer: JsonWriter, value: GameInfo?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("season")
    intAdapter.toJson(writer, value.season)
    writer.name("league")
    intAdapter.toJson(writer, value.league)
    writer.name("date")
    stringAdapter.toJson(writer, value.date)
    writer.name("homeTeam")
    intAdapter.toJson(writer, value.homeTeam)
    writer.name("homeScore")
    intAdapter.toJson(writer, value.homeScore)
    writer.name("awayTeam")
    intAdapter.toJson(writer, value.awayTeam)
    writer.name("awayScore")
    intAdapter.toJson(writer, value.awayScore)
    writer.name("type")
    stringAdapter.toJson(writer, value.type)
    writer.name("played")
    intAdapter.toJson(writer, value.played)
    writer.name("overtime")
    intAdapter.toJson(writer, value.overtime)
    writer.name("shootout")
    intAdapter.toJson(writer, value.shootout)
    writer.name("slug")
    stringAdapter.toJson(writer, value.slug)
    writer.name("awayTeamInfo")
    nullableTeamInfoResponseAdapter.toJson(writer, value.awayTeamInfo)
    writer.name("homeTeamInfo")
    nullableTeamInfoResponseAdapter.toJson(writer, value.homeTeamInfo)
    writer.name("seasonType")
    nullableSeasonTypeAdapter.toJson(writer, value.seasonType)
    writer.endObject()
  }
}
