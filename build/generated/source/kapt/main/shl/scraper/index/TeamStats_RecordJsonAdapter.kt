// Code generated by moshi-kotlin-codegen. Do not edit.
package shl.scraper.index

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class TeamStats_RecordJsonAdapter(
  moshi: Moshi
) : JsonAdapter<TeamStats.Record>() {
  private val options: JsonReader.Options = JsonReader.Options.of("wins", "losses", "OTL")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "wins")

  @Volatile
  private var constructorRef: Constructor<TeamStats.Record>? = null

  override fun toString(): String = buildString(38) {
      append("GeneratedJsonAdapter(").append("TeamStats.Record").append(')') }

  override fun fromJson(reader: JsonReader): TeamStats.Record {
    var wins: Int? = 0
    var losses: Int? = 0
    var otl: Int? = 0
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          wins = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("wins", "wins", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          losses = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("losses", "losses",
              reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          otl = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("otl", "OTL", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<TeamStats.Record> = this.constructorRef ?:
        TeamStats.Record::class.java.getDeclaredConstructor(Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        wins,
        losses,
        otl,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: TeamStats.Record?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("wins")
    intAdapter.toJson(writer, value.wins)
    writer.name("losses")
    intAdapter.toJson(writer, value.losses)
    writer.name("OTL")
    intAdapter.toJson(writer, value.otl)
    writer.endObject()
  }
}
