// Code generated by moshi-kotlin-codegen. Do not edit.
package shl.scraper.index.api

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString
import shl.scraper.index.TeamStats

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class LeagueDivisionJsonAdapter(
  moshi: Moshi
) : JsonAdapter<LeagueDivision>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "league", "conference",
      "name", "season", "teams")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val listOfTeamStatsAdapter: JsonAdapter<List<TeamStats>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, TeamStats::class.java), emptySet(),
      "teams")

  override fun toString(): String = buildString(36) {
      append("GeneratedJsonAdapter(").append("LeagueDivision").append(')') }

  override fun fromJson(reader: JsonReader): LeagueDivision {
    var id: Int? = null
    var league: Int? = null
    var conference: Int? = null
    var name: String? = null
    var season: Int? = null
    var teams: List<TeamStats>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> league = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("league", "league",
            reader)
        2 -> conference = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("conference",
            "conference", reader)
        3 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        4 -> season = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("season", "season",
            reader)
        5 -> teams = listOfTeamStatsAdapter.fromJson(reader) ?: throw Util.unexpectedNull("teams",
            "teams", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    val result = LeagueDivision(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        league = league ?: throw Util.missingProperty("league", "league", reader),
        conference = conference ?: throw Util.missingProperty("conference", "conference", reader),
        name = name ?: throw Util.missingProperty("name", "name", reader),
        season = season ?: throw Util.missingProperty("season", "season", reader)
    )
    result.teams = teams ?: result.teams
    return result
  }

  override fun toJson(writer: JsonWriter, value: LeagueDivision?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("league")
    intAdapter.toJson(writer, value.league)
    writer.name("conference")
    intAdapter.toJson(writer, value.conference)
    writer.name("name")
    stringAdapter.toJson(writer, value.name)
    writer.name("season")
    intAdapter.toJson(writer, value.season)
    writer.name("teams")
    listOfTeamStatsAdapter.toJson(writer, value.teams)
    writer.endObject()
  }
}
