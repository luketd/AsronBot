// Code generated by moshi-kotlin-codegen. Do not edit.
package shl.scraper.index.api

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class TeamNameDetailsJsonAdapter(
  moshi: Moshi
) : JsonAdapter<TeamNameDetails>() {
  private val options: JsonReader.Options = JsonReader.Options.of("first", "second")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "first")

  override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("TeamNameDetails").append(')') }

  override fun fromJson(reader: JsonReader): TeamNameDetails {
    var first: String? = null
    var second: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> first = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("first", "first",
            reader)
        1 -> second = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("second",
            "second", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return TeamNameDetails(
        first = first ?: throw Util.missingProperty("first", "first", reader),
        second = second ?: throw Util.missingProperty("second", "second", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: TeamNameDetails?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("first")
    stringAdapter.toJson(writer, value.first)
    writer.name("second")
    stringAdapter.toJson(writer, value.second)
    writer.endObject()
  }
}
