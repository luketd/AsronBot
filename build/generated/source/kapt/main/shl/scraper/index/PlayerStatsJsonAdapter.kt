// Code generated by moshi-kotlin-codegen. Do not edit.
package shl.scraper.index

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class PlayerStatsJsonAdapter(
  moshi: Moshi
) : JsonAdapter<PlayerStats>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "sthsId", "name",
      "position", "team", "teamId", "gamesPlayed", "league", "season", "timeOnIce", "goals",
      "assists", "points", "plusMinus", "pim", "ppGoals", "ppAssists", "ppPoints", "ppTimeOnIce",
      "shGoals", "shAssists", "shPoints", "shTimeOnIce", "fights", "fightWins", "fightLosses",
      "hits", "giveaways", "takeaways", "shotsOnGoal", "shotsBlocked", "gameRating",
      "offensiveGameRating", "defensiveGameRating", "faceoffs", "faceoffWins", "gwg",
      "advancedStats", "seasonType")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "sthsId")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val advancedStatsAdapter: JsonAdapter<PlayerStats.AdvancedStats> =
      moshi.adapter(PlayerStats.AdvancedStats::class.java, emptySet(), "advancedStats")

  private val nullableSeasonTypeAdapter: JsonAdapter<SeasonType?> =
      moshi.adapter(SeasonType::class.java, emptySet(), "seasonType")

  @Volatile
  private var constructorRef: Constructor<PlayerStats>? = null

  override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("PlayerStats").append(')') }

  override fun fromJson(reader: JsonReader): PlayerStats {
    var id: Int? = 0
    var sthsId: Int? = null
    var name: String? = null
    var position: String? = null
    var team: String? = null
    var teamId: Int? = 0
    var gamesPlayed: Int? = 0
    var league: Int? = 0
    var season: Int? = 0
    var timeOnIce: Int? = 0
    var goals: Int? = 0
    var assists: Int? = 0
    var points: Int? = 0
    var plusMinus: Int? = 0
    var pim: Int? = 0
    var ppGoals: Int? = 0
    var ppAssists: Int? = 0
    var ppPoints: Int? = null
    var ppTimeOnIce: Int? = 0
    var shGoals: Int? = 0
    var shAssists: Int? = 0
    var shPoints: Int? = 0
    var shTimeOnIce: Int? = 0
    var fights: Int? = 0
    var fightWins: Int? = 0
    var fightLosses: Int? = 0
    var hits: Int? = 0
    var giveaways: Int? = 0
    var takeaways: Int? = 0
    var shotsOnGoal: Int? = 0
    var shotsBlocked: Int? = 0
    var gameRating: Int? = 0
    var offensiveGameRating: Int? = 0
    var defensiveGameRating: Int? = 0
    var faceoffs: Int? = null
    var faceoffWins: Int? = null
    var gwg: Int? = null
    var advancedStats: PlayerStats.AdvancedStats? = null
    var seasonType: SeasonType? = null
    var mask0 = -1
    var mask1 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          sthsId = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          position = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("position",
              "position", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          team = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("team", "team", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          teamId = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("teamId", "teamId",
              reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          gamesPlayed = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("gamesPlayed",
              "gamesPlayed", reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          league = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("league", "league",
              reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          season = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("season", "season",
              reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          timeOnIce = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("timeOnIce",
              "timeOnIce", reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          goals = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("goals", "goals", reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          assists = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("assists", "assists",
              reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        12 -> {
          points = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("points", "points",
              reader)
          // $mask = $mask and (1 shl 12).inv()
          mask0 = mask0 and 0xffffefff.toInt()
        }
        13 -> {
          plusMinus = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("plusMinus",
              "plusMinus", reader)
          // $mask = $mask and (1 shl 13).inv()
          mask0 = mask0 and 0xffffdfff.toInt()
        }
        14 -> {
          pim = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("pim", "pim", reader)
          // $mask = $mask and (1 shl 14).inv()
          mask0 = mask0 and 0xffffbfff.toInt()
        }
        15 -> {
          ppGoals = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("ppGoals", "ppGoals",
              reader)
          // $mask = $mask and (1 shl 15).inv()
          mask0 = mask0 and 0xffff7fff.toInt()
        }
        16 -> {
          ppAssists = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("ppAssists",
              "ppAssists", reader)
          // $mask = $mask and (1 shl 16).inv()
          mask0 = mask0 and 0xfffeffff.toInt()
        }
        17 -> {
          ppPoints = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 17).inv()
          mask0 = mask0 and 0xfffdffff.toInt()
        }
        18 -> {
          ppTimeOnIce = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("ppTimeOnIce",
              "ppTimeOnIce", reader)
          // $mask = $mask and (1 shl 18).inv()
          mask0 = mask0 and 0xfffbffff.toInt()
        }
        19 -> {
          shGoals = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shGoals", "shGoals",
              reader)
          // $mask = $mask and (1 shl 19).inv()
          mask0 = mask0 and 0xfff7ffff.toInt()
        }
        20 -> {
          shAssists = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shAssists",
              "shAssists", reader)
          // $mask = $mask and (1 shl 20).inv()
          mask0 = mask0 and 0xffefffff.toInt()
        }
        21 -> {
          shPoints = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shPoints",
              "shPoints", reader)
          // $mask = $mask and (1 shl 21).inv()
          mask0 = mask0 and 0xffdfffff.toInt()
        }
        22 -> {
          shTimeOnIce = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shTimeOnIce",
              "shTimeOnIce", reader)
          // $mask = $mask and (1 shl 22).inv()
          mask0 = mask0 and 0xffbfffff.toInt()
        }
        23 -> {
          fights = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("fights", "fights",
              reader)
          // $mask = $mask and (1 shl 23).inv()
          mask0 = mask0 and 0xff7fffff.toInt()
        }
        24 -> {
          fightWins = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("fightWins",
              "fightWins", reader)
          // $mask = $mask and (1 shl 24).inv()
          mask0 = mask0 and 0xfeffffff.toInt()
        }
        25 -> {
          fightLosses = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("fightLosses",
              "fightLosses", reader)
          // $mask = $mask and (1 shl 25).inv()
          mask0 = mask0 and 0xfdffffff.toInt()
        }
        26 -> {
          hits = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("hits", "hits", reader)
          // $mask = $mask and (1 shl 26).inv()
          mask0 = mask0 and 0xfbffffff.toInt()
        }
        27 -> {
          giveaways = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("giveaways",
              "giveaways", reader)
          // $mask = $mask and (1 shl 27).inv()
          mask0 = mask0 and 0xf7ffffff.toInt()
        }
        28 -> {
          takeaways = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("takeaways",
              "takeaways", reader)
          // $mask = $mask and (1 shl 28).inv()
          mask0 = mask0 and 0xefffffff.toInt()
        }
        29 -> {
          shotsOnGoal = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shotsOnGoal",
              "shotsOnGoal", reader)
          // $mask = $mask and (1 shl 29).inv()
          mask0 = mask0 and 0xdfffffff.toInt()
        }
        30 -> {
          shotsBlocked = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shotsBlocked",
              "shotsBlocked", reader)
          // $mask = $mask and (1 shl 30).inv()
          mask0 = mask0 and 0xbfffffff.toInt()
        }
        31 -> {
          gameRating = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("gameRating",
              "gameRating", reader)
          // $mask = $mask and (1 shl 31).inv()
          mask0 = mask0 and 0x7fffffff.toInt()
        }
        32 -> {
          offensiveGameRating = intAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("offensiveGameRating", "offensiveGameRating", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask1 = mask1 and 0xfffffffe.toInt()
        }
        33 -> {
          defensiveGameRating = intAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("defensiveGameRating", "defensiveGameRating", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask1 = mask1 and 0xfffffffd.toInt()
        }
        34 -> {
          faceoffs = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask1 = mask1 and 0xfffffffb.toInt()
        }
        35 -> {
          faceoffWins = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask1 = mask1 and 0xfffffff7.toInt()
        }
        36 -> {
          gwg = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask1 = mask1 and 0xffffffef.toInt()
        }
        37 -> {
          advancedStats = advancedStatsAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("advancedStats", "advancedStats", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask1 = mask1 and 0xffffffdf.toInt()
        }
        38 -> {
          seasonType = nullableSeasonTypeAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask1 = mask1 and 0xffffffbf.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<PlayerStats> = this.constructorRef ?:
        PlayerStats::class.java.getDeclaredConstructor(Int::class.javaPrimitiveType,
        Int::class.javaObjectType, String::class.java, String::class.java, String::class.java,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaObjectType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaObjectType,
        Int::class.javaObjectType, Int::class.javaObjectType, PlayerStats.AdvancedStats::class.java,
        SeasonType::class.java, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        id,
        sthsId,
        name,
        position,
        team,
        teamId,
        gamesPlayed,
        league,
        season,
        timeOnIce,
        goals,
        assists,
        points,
        plusMinus,
        pim,
        ppGoals,
        ppAssists,
        ppPoints,
        ppTimeOnIce,
        shGoals,
        shAssists,
        shPoints,
        shTimeOnIce,
        fights,
        fightWins,
        fightLosses,
        hits,
        giveaways,
        takeaways,
        shotsOnGoal,
        shotsBlocked,
        gameRating,
        offensiveGameRating,
        defensiveGameRating,
        faceoffs,
        faceoffWins,
        gwg,
        advancedStats,
        seasonType,
        mask0, mask1,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: PlayerStats?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("sthsId")
    nullableIntAdapter.toJson(writer, value.sthsId)
    writer.name("name")
    stringAdapter.toJson(writer, value.name)
    writer.name("position")
    stringAdapter.toJson(writer, value.position)
    writer.name("team")
    stringAdapter.toJson(writer, value.team)
    writer.name("teamId")
    intAdapter.toJson(writer, value.teamId)
    writer.name("gamesPlayed")
    intAdapter.toJson(writer, value.gamesPlayed)
    writer.name("league")
    intAdapter.toJson(writer, value.league)
    writer.name("season")
    intAdapter.toJson(writer, value.season)
    writer.name("timeOnIce")
    intAdapter.toJson(writer, value.timeOnIce)
    writer.name("goals")
    intAdapter.toJson(writer, value.goals)
    writer.name("assists")
    intAdapter.toJson(writer, value.assists)
    writer.name("points")
    intAdapter.toJson(writer, value.points)
    writer.name("plusMinus")
    intAdapter.toJson(writer, value.plusMinus)
    writer.name("pim")
    intAdapter.toJson(writer, value.pim)
    writer.name("ppGoals")
    intAdapter.toJson(writer, value.ppGoals)
    writer.name("ppAssists")
    intAdapter.toJson(writer, value.ppAssists)
    writer.name("ppPoints")
    nullableIntAdapter.toJson(writer, value.ppPoints)
    writer.name("ppTimeOnIce")
    intAdapter.toJson(writer, value.ppTimeOnIce)
    writer.name("shGoals")
    intAdapter.toJson(writer, value.shGoals)
    writer.name("shAssists")
    intAdapter.toJson(writer, value.shAssists)
    writer.name("shPoints")
    intAdapter.toJson(writer, value.shPoints)
    writer.name("shTimeOnIce")
    intAdapter.toJson(writer, value.shTimeOnIce)
    writer.name("fights")
    intAdapter.toJson(writer, value.fights)
    writer.name("fightWins")
    intAdapter.toJson(writer, value.fightWins)
    writer.name("fightLosses")
    intAdapter.toJson(writer, value.fightLosses)
    writer.name("hits")
    intAdapter.toJson(writer, value.hits)
    writer.name("giveaways")
    intAdapter.toJson(writer, value.giveaways)
    writer.name("takeaways")
    intAdapter.toJson(writer, value.takeaways)
    writer.name("shotsOnGoal")
    intAdapter.toJson(writer, value.shotsOnGoal)
    writer.name("shotsBlocked")
    intAdapter.toJson(writer, value.shotsBlocked)
    writer.name("gameRating")
    intAdapter.toJson(writer, value.gameRating)
    writer.name("offensiveGameRating")
    intAdapter.toJson(writer, value.offensiveGameRating)
    writer.name("defensiveGameRating")
    intAdapter.toJson(writer, value.defensiveGameRating)
    writer.name("faceoffs")
    nullableIntAdapter.toJson(writer, value.faceoffs)
    writer.name("faceoffWins")
    nullableIntAdapter.toJson(writer, value.faceoffWins)
    writer.name("gwg")
    nullableIntAdapter.toJson(writer, value.gwg)
    writer.name("advancedStats")
    advancedStatsAdapter.toJson(writer, value.advancedStats)
    writer.name("seasonType")
    nullableSeasonTypeAdapter.toJson(writer, value.seasonType)
    writer.endObject()
  }
}
