// Code generated by moshi-kotlin-codegen. Do not edit.
package shl.scraper.index

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Float
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class PlayerStats_AdvancedStatsJsonAdapter(
  moshi: Moshi
) : JsonAdapter<PlayerStats.AdvancedStats>() {
  private val options: JsonReader.Options = JsonReader.Options.of("PDO", "GF60", "GA60", "SF60",
      "SA60", "CF", "CA", "CFPct", "CFPctRel", "FF", "FA", "FFPct", "FFPctRel")

  private val floatAdapter: JsonAdapter<Float> = moshi.adapter(Float::class.java, emptySet(), "PDO")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "CF")

  @Volatile
  private var constructorRef: Constructor<PlayerStats.AdvancedStats>? = null

  override fun toString(): String = buildString(47) {
      append("GeneratedJsonAdapter(").append("PlayerStats.AdvancedStats").append(')') }

  override fun fromJson(reader: JsonReader): PlayerStats.AdvancedStats {
    var PDO: Float? = 0f
    var GF60: Float? = 0f
    var GA60: Float? = 0f
    var SF60: Float? = 0f
    var SA60: Float? = 0f
    var CF: Int? = 0
    var CA: Int? = 0
    var CFPct: Float? = 0f
    var CFPctRel: Float? = 0f
    var FF: Float? = 0f
    var FA: Float? = 0f
    var FFPct: Float? = 0f
    var FFPctRel: Float? = 0f
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          PDO = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("PDO", "PDO", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          GF60 = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("GF60", "GF60", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          GA60 = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("GA60", "GA60", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          SF60 = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("SF60", "SF60", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          SA60 = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("SA60", "SA60", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          CF = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("CF", "CF", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          CA = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("CA", "CA", reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          CFPct = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("CFPct", "CFPct",
              reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          CFPctRel = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("CFPctRel",
              "CFPctRel", reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          FF = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("FF", "FF", reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          FA = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("FA", "FA", reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          FFPct = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("FFPct", "FFPct",
              reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        12 -> {
          FFPctRel = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("FFPctRel",
              "FFPctRel", reader)
          // $mask = $mask and (1 shl 12).inv()
          mask0 = mask0 and 0xffffefff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<PlayerStats.AdvancedStats> = this.constructorRef ?:
        PlayerStats.AdvancedStats::class.java.getDeclaredConstructor(Float::class.javaPrimitiveType,
        Float::class.javaPrimitiveType, Float::class.javaPrimitiveType,
        Float::class.javaPrimitiveType, Float::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Float::class.javaPrimitiveType,
        Float::class.javaPrimitiveType, Float::class.javaPrimitiveType,
        Float::class.javaPrimitiveType, Float::class.javaPrimitiveType,
        Float::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        PDO,
        GF60,
        GA60,
        SF60,
        SA60,
        CF,
        CA,
        CFPct,
        CFPctRel,
        FF,
        FA,
        FFPct,
        FFPctRel,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: PlayerStats.AdvancedStats?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("PDO")
    floatAdapter.toJson(writer, value.PDO)
    writer.name("GF60")
    floatAdapter.toJson(writer, value.GF60)
    writer.name("GA60")
    floatAdapter.toJson(writer, value.GA60)
    writer.name("SF60")
    floatAdapter.toJson(writer, value.SF60)
    writer.name("SA60")
    floatAdapter.toJson(writer, value.SA60)
    writer.name("CF")
    intAdapter.toJson(writer, value.CF)
    writer.name("CA")
    intAdapter.toJson(writer, value.CA)
    writer.name("CFPct")
    floatAdapter.toJson(writer, value.CFPct)
    writer.name("CFPctRel")
    floatAdapter.toJson(writer, value.CFPctRel)
    writer.name("FF")
    floatAdapter.toJson(writer, value.FF)
    writer.name("FA")
    floatAdapter.toJson(writer, value.FA)
    writer.name("FFPct")
    floatAdapter.toJson(writer, value.FFPct)
    writer.name("FFPctRel")
    floatAdapter.toJson(writer, value.FFPctRel)
    writer.endObject()
  }
}
