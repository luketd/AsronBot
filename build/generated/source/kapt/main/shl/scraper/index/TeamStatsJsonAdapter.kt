// Code generated by moshi-kotlin-codegen. Do not edit.
package shl.scraper.index

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString
import shl.scraper.index.api.DetailedTeamStats
import shl.scraper.index.api.TeamInfoResponse
import shl.scraper.roster.TeamInfo

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class TeamStatsJsonAdapter(
  moshi: Moshi
) : JsonAdapter<TeamStats>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "name", "gp", "wins",
      "losses", "OTW", "OTL", "points", "goalsFor", "goalsAgainst", "home", "away", "shootout",
      "conferencePosition", "corsiRank", "detailedStats", "divisionPosition", "goalsAgainstRank",
      "goalsForRank", "leaguePosition", "pdoRank", "pimsRank", "pkRank", "ppRank",
      "regularSeasonPlayerStats", "shotDiffRank", "shotsAgainstRank", "shotsForRank", "teamInfo",
      "teamInfoResponse")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val recordAdapter: JsonAdapter<TeamStats.Record> =
      moshi.adapter(TeamStats.Record::class.java, emptySet(), "home")

  private val nullableDetailedTeamStatsAdapter: JsonAdapter<DetailedTeamStats?> =
      moshi.adapter(DetailedTeamStats::class.java, emptySet(), "detailedStats")

  private val nullableListOfPlayerStatsAdapter: JsonAdapter<List<PlayerStats>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, PlayerStats::class.java),
      emptySet(), "regularSeasonPlayerStats")

  private val nullableTeamInfoAdapter: JsonAdapter<TeamInfo?> = moshi.adapter(TeamInfo::class.java,
      emptySet(), "teamInfo")

  private val nullableTeamInfoResponseAdapter: JsonAdapter<TeamInfoResponse?> =
      moshi.adapter(TeamInfoResponse::class.java, emptySet(), "teamInfoResponse")

  @Volatile
  private var constructorRef: Constructor<TeamStats>? = null

  override fun toString(): String = buildString(31) {
      append("GeneratedJsonAdapter(").append("TeamStats").append(')') }

  override fun fromJson(reader: JsonReader): TeamStats {
    var id: Int? = 0
    var name: String? = null
    var games: Int? = 0
    var wins: Int? = 0
    var losses: Int? = 0
    var otw: Int? = 0
    var otl: Int? = 0
    var points: Int? = 0
    var goalsFor: Int? = 0
    var goalsAgainst: Int? = 0
    var home: TeamStats.Record? = null
    var away: TeamStats.Record? = null
    var shootout: TeamStats.Record? = null
    var conferencePosition: Int? = null
    var corsiRank: Int? = null
    var detailedStats: DetailedTeamStats? = null
    var detailedStatsSet: Boolean = false
    var divisionPosition: Int? = null
    var goalsAgainstRank: Int? = null
    var goalsForRank: Int? = null
    var leaguePosition: Int? = null
    var pdoRank: Int? = null
    var pimsRank: Int? = null
    var pkRank: Int? = null
    var ppRank: Int? = null
    var regularSeasonPlayerStats: List<PlayerStats>? = null
    var regularSeasonPlayerStatsSet: Boolean = false
    var shotDiffRank: Int? = null
    var shotsAgainstRank: Int? = null
    var shotsForRank: Int? = null
    var teamInfo: TeamInfo? = null
    var teamInfoSet: Boolean = false
    var teamInfoResponse: TeamInfoResponse? = null
    var teamInfoResponseSet: Boolean = false
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          games = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("games", "gp", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          wins = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("wins", "wins", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          losses = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("losses", "losses",
              reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          otw = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("otw", "OTW", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          otl = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("otl", "OTL", reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          points = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("points", "points",
              reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          goalsFor = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("goalsFor",
              "goalsFor", reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          goalsAgainst = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("goalsAgainst",
              "goalsAgainst", reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          home = recordAdapter.fromJson(reader) ?: throw Util.unexpectedNull("home", "home", reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          away = recordAdapter.fromJson(reader) ?: throw Util.unexpectedNull("away", "away", reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        12 -> {
          shootout = recordAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shootout",
              "shootout", reader)
          // $mask = $mask and (1 shl 12).inv()
          mask0 = mask0 and 0xffffefff.toInt()
        }
        13 -> conferencePosition = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("conferencePosition", "conferencePosition", reader)
        14 -> corsiRank = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("corsiRank",
            "corsiRank", reader)
        15 -> {
          detailedStats = nullableDetailedTeamStatsAdapter.fromJson(reader)
          detailedStatsSet = true
        }
        16 -> divisionPosition = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("divisionPosition", "divisionPosition", reader)
        17 -> goalsAgainstRank = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("goalsAgainstRank", "goalsAgainstRank", reader)
        18 -> goalsForRank = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("goalsForRank", "goalsForRank", reader)
        19 -> leaguePosition = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("leaguePosition", "leaguePosition", reader)
        20 -> pdoRank = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("pdoRank",
            "pdoRank", reader)
        21 -> pimsRank = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("pimsRank",
            "pimsRank", reader)
        22 -> pkRank = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("pkRank", "pkRank",
            reader)
        23 -> ppRank = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("ppRank", "ppRank",
            reader)
        24 -> {
          regularSeasonPlayerStats = nullableListOfPlayerStatsAdapter.fromJson(reader)
          regularSeasonPlayerStatsSet = true
        }
        25 -> shotDiffRank = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("shotDiffRank", "shotDiffRank", reader)
        26 -> shotsAgainstRank = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("shotsAgainstRank", "shotsAgainstRank", reader)
        27 -> shotsForRank = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("shotsForRank", "shotsForRank", reader)
        28 -> {
          teamInfo = nullableTeamInfoAdapter.fromJson(reader)
          teamInfoSet = true
        }
        29 -> {
          teamInfoResponse = nullableTeamInfoResponseAdapter.fromJson(reader)
          teamInfoResponseSet = true
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<TeamStats> = this.constructorRef ?:
        TeamStats::class.java.getDeclaredConstructor(Int::class.javaPrimitiveType,
        String::class.java, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        TeamStats.Record::class.java, TeamStats.Record::class.java, TeamStats.Record::class.java,
        Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef =
        it }
    val result = localConstructor.newInstance(
        id,
        name,
        games,
        wins,
        losses,
        otw,
        otl,
        points,
        goalsFor,
        goalsAgainst,
        home,
        away,
        shootout,
        mask0,
        null
    )
    result.conferencePosition = conferencePosition ?: result.conferencePosition
    result.corsiRank = corsiRank ?: result.corsiRank
    result.detailedStats = if (detailedStatsSet) detailedStats else result.detailedStats
    result.divisionPosition = divisionPosition ?: result.divisionPosition
    result.goalsAgainstRank = goalsAgainstRank ?: result.goalsAgainstRank
    result.goalsForRank = goalsForRank ?: result.goalsForRank
    result.leaguePosition = leaguePosition ?: result.leaguePosition
    result.pdoRank = pdoRank ?: result.pdoRank
    result.pimsRank = pimsRank ?: result.pimsRank
    result.pkRank = pkRank ?: result.pkRank
    result.ppRank = ppRank ?: result.ppRank
    result.regularSeasonPlayerStats = if (regularSeasonPlayerStatsSet) regularSeasonPlayerStats else
        result.regularSeasonPlayerStats
    result.shotDiffRank = shotDiffRank ?: result.shotDiffRank
    result.shotsAgainstRank = shotsAgainstRank ?: result.shotsAgainstRank
    result.shotsForRank = shotsForRank ?: result.shotsForRank
    result.teamInfo = if (teamInfoSet) teamInfo else result.teamInfo
    result.teamInfoResponse = if (teamInfoResponseSet) teamInfoResponse else result.teamInfoResponse
    return result
  }

  override fun toJson(writer: JsonWriter, value: TeamStats?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("name")
    stringAdapter.toJson(writer, value.name)
    writer.name("gp")
    intAdapter.toJson(writer, value.games)
    writer.name("wins")
    intAdapter.toJson(writer, value.wins)
    writer.name("losses")
    intAdapter.toJson(writer, value.losses)
    writer.name("OTW")
    intAdapter.toJson(writer, value.otw)
    writer.name("OTL")
    intAdapter.toJson(writer, value.otl)
    writer.name("points")
    intAdapter.toJson(writer, value.points)
    writer.name("goalsFor")
    intAdapter.toJson(writer, value.goalsFor)
    writer.name("goalsAgainst")
    intAdapter.toJson(writer, value.goalsAgainst)
    writer.name("home")
    recordAdapter.toJson(writer, value.home)
    writer.name("away")
    recordAdapter.toJson(writer, value.away)
    writer.name("shootout")
    recordAdapter.toJson(writer, value.shootout)
    writer.name("conferencePosition")
    intAdapter.toJson(writer, value.conferencePosition)
    writer.name("corsiRank")
    intAdapter.toJson(writer, value.corsiRank)
    writer.name("detailedStats")
    nullableDetailedTeamStatsAdapter.toJson(writer, value.detailedStats)
    writer.name("divisionPosition")
    intAdapter.toJson(writer, value.divisionPosition)
    writer.name("goalsAgainstRank")
    intAdapter.toJson(writer, value.goalsAgainstRank)
    writer.name("goalsForRank")
    intAdapter.toJson(writer, value.goalsForRank)
    writer.name("leaguePosition")
    intAdapter.toJson(writer, value.leaguePosition)
    writer.name("pdoRank")
    intAdapter.toJson(writer, value.pdoRank)
    writer.name("pimsRank")
    intAdapter.toJson(writer, value.pimsRank)
    writer.name("pkRank")
    intAdapter.toJson(writer, value.pkRank)
    writer.name("ppRank")
    intAdapter.toJson(writer, value.ppRank)
    writer.name("regularSeasonPlayerStats")
    nullableListOfPlayerStatsAdapter.toJson(writer, value.regularSeasonPlayerStats)
    writer.name("shotDiffRank")
    intAdapter.toJson(writer, value.shotDiffRank)
    writer.name("shotsAgainstRank")
    intAdapter.toJson(writer, value.shotsAgainstRank)
    writer.name("shotsForRank")
    intAdapter.toJson(writer, value.shotsForRank)
    writer.name("teamInfo")
    nullableTeamInfoAdapter.toJson(writer, value.teamInfo)
    writer.name("teamInfoResponse")
    nullableTeamInfoResponseAdapter.toJson(writer, value.teamInfoResponse)
    writer.endObject()
  }
}
