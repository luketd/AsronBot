// Code generated by moshi-kotlin-codegen. Do not edit.
package shl.scraper.index

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class GoalieStatsJsonAdapter(
  moshi: Moshi
) : JsonAdapter<GoalieStats>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "sthsId", "name", "league",
      "season", "team", "teamId", "gamesPlayed", "minutes", "wins", "losses", "ot", "shotsAgainst",
      "saves", "goalsAgainst", "gaa", "shutouts", "savePct", "gameRating", "seasonType")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "sthsId")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "gaa")

  private val nullableSeasonTypeAdapter: JsonAdapter<SeasonType?> =
      moshi.adapter(SeasonType::class.java, emptySet(), "seasonType")

  @Volatile
  private var constructorRef: Constructor<GoalieStats>? = null

  override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("GoalieStats").append(')') }

  override fun fromJson(reader: JsonReader): GoalieStats {
    var id: Int? = 0
    var sthsId: Int? = null
    var name: String? = null
    var league: Int? = 0
    var season: Int? = 0
    var team: String? = null
    var teamId: Int? = 0
    var gamesPlayed: Int? = 0
    var minutes: Int? = 0
    var wins: Int? = 0
    var losses: Int? = 0
    var ot: Int? = 0
    var shotsAgainst: Int? = 0
    var saves: Int? = 0
    var goalsAgainst: Int? = 0
    var gaa: Double? = 0.0
    var shutouts: Int? = 0
    var savePct: String? = null
    var gameRating: Int? = 0
    var seasonType: SeasonType? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          sthsId = nullableIntAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          league = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("league", "league",
              reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          season = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("season", "season",
              reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          team = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("team", "team", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          teamId = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("teamId", "teamId",
              reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          gamesPlayed = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("gamesPlayed",
              "gamesPlayed", reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          minutes = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("minutes", "minutes",
              reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          wins = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("wins", "wins", reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> {
          losses = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("losses", "losses",
              reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        11 -> {
          ot = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("ot", "ot", reader)
          // $mask = $mask and (1 shl 11).inv()
          mask0 = mask0 and 0xfffff7ff.toInt()
        }
        12 -> {
          shotsAgainst = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shotsAgainst",
              "shotsAgainst", reader)
          // $mask = $mask and (1 shl 12).inv()
          mask0 = mask0 and 0xffffefff.toInt()
        }
        13 -> {
          saves = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("saves", "saves", reader)
          // $mask = $mask and (1 shl 13).inv()
          mask0 = mask0 and 0xffffdfff.toInt()
        }
        14 -> {
          goalsAgainst = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("goalsAgainst",
              "goalsAgainst", reader)
          // $mask = $mask and (1 shl 14).inv()
          mask0 = mask0 and 0xffffbfff.toInt()
        }
        15 -> {
          gaa = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("gaa", "gaa", reader)
          // $mask = $mask and (1 shl 15).inv()
          mask0 = mask0 and 0xffff7fff.toInt()
        }
        16 -> {
          shutouts = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shutouts",
              "shutouts", reader)
          // $mask = $mask and (1 shl 16).inv()
          mask0 = mask0 and 0xfffeffff.toInt()
        }
        17 -> {
          savePct = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("savePct",
              "savePct", reader)
          // $mask = $mask and (1 shl 17).inv()
          mask0 = mask0 and 0xfffdffff.toInt()
        }
        18 -> {
          gameRating = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("gameRating",
              "gameRating", reader)
          // $mask = $mask and (1 shl 18).inv()
          mask0 = mask0 and 0xfffbffff.toInt()
        }
        19 -> {
          seasonType = nullableSeasonTypeAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 19).inv()
          mask0 = mask0 and 0xfff7ffff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<GoalieStats> = this.constructorRef ?:
        GoalieStats::class.java.getDeclaredConstructor(Int::class.javaPrimitiveType,
        Int::class.javaObjectType, String::class.java, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, String::class.java, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Int::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, Int::class.javaPrimitiveType, Double::class.javaPrimitiveType,
        Int::class.javaPrimitiveType, String::class.java, Int::class.javaPrimitiveType,
        SeasonType::class.java, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        id,
        sthsId,
        name,
        league,
        season,
        team,
        teamId,
        gamesPlayed,
        minutes,
        wins,
        losses,
        ot,
        shotsAgainst,
        saves,
        goalsAgainst,
        gaa,
        shutouts,
        savePct,
        gameRating,
        seasonType,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: GoalieStats?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("sthsId")
    nullableIntAdapter.toJson(writer, value.sthsId)
    writer.name("name")
    stringAdapter.toJson(writer, value.name)
    writer.name("league")
    intAdapter.toJson(writer, value.league)
    writer.name("season")
    intAdapter.toJson(writer, value.season)
    writer.name("team")
    stringAdapter.toJson(writer, value.team)
    writer.name("teamId")
    intAdapter.toJson(writer, value.teamId)
    writer.name("gamesPlayed")
    intAdapter.toJson(writer, value.gamesPlayed)
    writer.name("minutes")
    intAdapter.toJson(writer, value.minutes)
    writer.name("wins")
    intAdapter.toJson(writer, value.wins)
    writer.name("losses")
    intAdapter.toJson(writer, value.losses)
    writer.name("ot")
    intAdapter.toJson(writer, value.ot)
    writer.name("shotsAgainst")
    intAdapter.toJson(writer, value.shotsAgainst)
    writer.name("saves")
    intAdapter.toJson(writer, value.saves)
    writer.name("goalsAgainst")
    intAdapter.toJson(writer, value.goalsAgainst)
    writer.name("gaa")
    doubleAdapter.toJson(writer, value.gaa)
    writer.name("shutouts")
    intAdapter.toJson(writer, value.shutouts)
    writer.name("savePct")
    stringAdapter.toJson(writer, value.savePct)
    writer.name("gameRating")
    intAdapter.toJson(writer, value.gameRating)
    writer.name("seasonType")
    nullableSeasonTypeAdapter.toJson(writer, value.seasonType)
    writer.endObject()
  }
}
