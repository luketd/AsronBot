// Code generated by moshi-kotlin-codegen. Do not edit.
package shl.scraper.index.api

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class DetailedTeamStatsJsonAdapter(
  moshi: Moshi
) : JsonAdapter<DetailedTeamStats>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "season", "league",
      "conference", "division", "name", "abbreviation", "gamesPlayed", "goalsFor", "goalsAgainst",
      "shotsFor", "shotsAgainst", "faceoffPct", "shotsBlocked", "hits", "takeaways", "giveaways",
      "penaltyMinutesPerGame", "ppOpportunities", "ppGoalsFor", "ppGoalsAgainst", "shOpportunities",
      "shGoalsFor", "shGoalsAgainst")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "faceoffPct")

  override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("DetailedTeamStats").append(')') }

  override fun fromJson(reader: JsonReader): DetailedTeamStats {
    var id: Int? = null
    var season: Int? = null
    var league: Int? = null
    var conference: Int? = null
    var division: Int? = null
    var name: String? = null
    var abbreviation: String? = null
    var gamesPlayed: Int? = null
    var goalsFor: Int? = null
    var goalsAgainst: Int? = null
    var shotsFor: Int? = null
    var shotsAgainst: Int? = null
    var faceoffPct: Double? = null
    var shotsBlocked: Int? = null
    var hits: Int? = null
    var takeaways: Int? = null
    var giveaways: Int? = null
    var penaltyMinutesPerGame: Double? = null
    var ppOpportunities: Int? = null
    var ppGoalsFor: Int? = null
    var ppGoalsAgainst: Int? = null
    var shOpportunities: Int? = null
    var shGoalsFor: Int? = null
    var shGoalsAgainst: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> season = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("season", "season",
            reader)
        2 -> league = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("league", "league",
            reader)
        3 -> conference = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("conference",
            "conference", reader)
        4 -> division = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("division",
            "division", reader)
        5 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        6 -> abbreviation = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("abbreviation", "abbreviation", reader)
        7 -> gamesPlayed = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("gamesPlayed",
            "gamesPlayed", reader)
        8 -> goalsFor = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("goalsFor",
            "goalsFor", reader)
        9 -> goalsAgainst = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("goalsAgainst",
            "goalsAgainst", reader)
        10 -> shotsFor = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shotsFor",
            "shotsFor", reader)
        11 -> shotsAgainst = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("shotsAgainst", "shotsAgainst", reader)
        12 -> faceoffPct = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("faceoffPct",
            "faceoffPct", reader)
        13 -> shotsBlocked = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("shotsBlocked", "shotsBlocked", reader)
        14 -> hits = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("hits", "hits",
            reader)
        15 -> takeaways = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("takeaways",
            "takeaways", reader)
        16 -> giveaways = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("giveaways",
            "giveaways", reader)
        17 -> penaltyMinutesPerGame = doubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("penaltyMinutesPerGame", "penaltyMinutesPerGame", reader)
        18 -> ppOpportunities = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("ppOpportunities", "ppOpportunities", reader)
        19 -> ppGoalsFor = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("ppGoalsFor",
            "ppGoalsFor", reader)
        20 -> ppGoalsAgainst = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("ppGoalsAgainst", "ppGoalsAgainst", reader)
        21 -> shOpportunities = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("shOpportunities", "shOpportunities", reader)
        22 -> shGoalsFor = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("shGoalsFor",
            "shGoalsFor", reader)
        23 -> shGoalsAgainst = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("shGoalsAgainst", "shGoalsAgainst", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return DetailedTeamStats(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        season = season ?: throw Util.missingProperty("season", "season", reader),
        league = league ?: throw Util.missingProperty("league", "league", reader),
        conference = conference ?: throw Util.missingProperty("conference", "conference", reader),
        division = division ?: throw Util.missingProperty("division", "division", reader),
        name = name ?: throw Util.missingProperty("name", "name", reader),
        abbreviation = abbreviation ?: throw Util.missingProperty("abbreviation", "abbreviation",
            reader),
        gamesPlayed = gamesPlayed ?: throw Util.missingProperty("gamesPlayed", "gamesPlayed",
            reader),
        goalsFor = goalsFor ?: throw Util.missingProperty("goalsFor", "goalsFor", reader),
        goalsAgainst = goalsAgainst ?: throw Util.missingProperty("goalsAgainst", "goalsAgainst",
            reader),
        shotsFor = shotsFor ?: throw Util.missingProperty("shotsFor", "shotsFor", reader),
        shotsAgainst = shotsAgainst ?: throw Util.missingProperty("shotsAgainst", "shotsAgainst",
            reader),
        faceoffPct = faceoffPct ?: throw Util.missingProperty("faceoffPct", "faceoffPct", reader),
        shotsBlocked = shotsBlocked ?: throw Util.missingProperty("shotsBlocked", "shotsBlocked",
            reader),
        hits = hits ?: throw Util.missingProperty("hits", "hits", reader),
        takeaways = takeaways ?: throw Util.missingProperty("takeaways", "takeaways", reader),
        giveaways = giveaways ?: throw Util.missingProperty("giveaways", "giveaways", reader),
        penaltyMinutesPerGame = penaltyMinutesPerGame ?:
            throw Util.missingProperty("penaltyMinutesPerGame", "penaltyMinutesPerGame", reader),
        ppOpportunities = ppOpportunities ?: throw Util.missingProperty("ppOpportunities",
            "ppOpportunities", reader),
        ppGoalsFor = ppGoalsFor ?: throw Util.missingProperty("ppGoalsFor", "ppGoalsFor", reader),
        ppGoalsAgainst = ppGoalsAgainst ?: throw Util.missingProperty("ppGoalsAgainst",
            "ppGoalsAgainst", reader),
        shOpportunities = shOpportunities ?: throw Util.missingProperty("shOpportunities",
            "shOpportunities", reader),
        shGoalsFor = shGoalsFor ?: throw Util.missingProperty("shGoalsFor", "shGoalsFor", reader),
        shGoalsAgainst = shGoalsAgainst ?: throw Util.missingProperty("shGoalsAgainst",
            "shGoalsAgainst", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: DetailedTeamStats?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("season")
    intAdapter.toJson(writer, value.season)
    writer.name("league")
    intAdapter.toJson(writer, value.league)
    writer.name("conference")
    intAdapter.toJson(writer, value.conference)
    writer.name("division")
    intAdapter.toJson(writer, value.division)
    writer.name("name")
    stringAdapter.toJson(writer, value.name)
    writer.name("abbreviation")
    stringAdapter.toJson(writer, value.abbreviation)
    writer.name("gamesPlayed")
    intAdapter.toJson(writer, value.gamesPlayed)
    writer.name("goalsFor")
    intAdapter.toJson(writer, value.goalsFor)
    writer.name("goalsAgainst")
    intAdapter.toJson(writer, value.goalsAgainst)
    writer.name("shotsFor")
    intAdapter.toJson(writer, value.shotsFor)
    writer.name("shotsAgainst")
    intAdapter.toJson(writer, value.shotsAgainst)
    writer.name("faceoffPct")
    doubleAdapter.toJson(writer, value.faceoffPct)
    writer.name("shotsBlocked")
    intAdapter.toJson(writer, value.shotsBlocked)
    writer.name("hits")
    intAdapter.toJson(writer, value.hits)
    writer.name("takeaways")
    intAdapter.toJson(writer, value.takeaways)
    writer.name("giveaways")
    intAdapter.toJson(writer, value.giveaways)
    writer.name("penaltyMinutesPerGame")
    doubleAdapter.toJson(writer, value.penaltyMinutesPerGame)
    writer.name("ppOpportunities")
    intAdapter.toJson(writer, value.ppOpportunities)
    writer.name("ppGoalsFor")
    intAdapter.toJson(writer, value.ppGoalsFor)
    writer.name("ppGoalsAgainst")
    intAdapter.toJson(writer, value.ppGoalsAgainst)
    writer.name("shOpportunities")
    intAdapter.toJson(writer, value.shOpportunities)
    writer.name("shGoalsFor")
    intAdapter.toJson(writer, value.shGoalsFor)
    writer.name("shGoalsAgainst")
    intAdapter.toJson(writer, value.shGoalsAgainst)
    writer.endObject()
  }
}
